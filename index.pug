doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no')
    link(rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css' integrity='sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm' crossorigin='anonymous')

    title dirty - #{username}
  body
    .container
      h1 #{username}

      p.
        Комментарии и посты с #[span(style='color:#00C853;') положительным],
        #[span(style='color:#757575;') нулевым] и
        #[span(style='color:#FF5722;') отрицательным]
        рейтингами:
      svg#activities(width='942' height='610')

      p.
        Промежутки отсутствия активности #[span(style='color:#B0BEC5;') длиннее] восьми часов,
        #[span(style='color:#FF9800;') длиннее] шести часов и
        #[span(style='color:#FF5722;') короче] шести часов в сутки.
        Учитываются только в те дни, для которых активность была и за день до, и через день после.
        Например, если пользователь оставил пару комментариев в среду, но не писал ничего ни во вторник,
        ни в четверг, то мы не учитываем эти периоды, потому что по ним невозможно определить сколько
        часов в сутки этот пользователь спит:
      svg#inactivities(width='942' height='610')

      p.
        Суммарные #[span(style='color:#00C853;') положительный] и
        #[span(style='color:#FF5722;') отрицательный] рейтинги
        по дням:
      svg#ratings(width='942' height='610')

    script(src='https://d3js.org/d3.v5.min.js')
    script.
      const data = !{activities}
        .map(a => {
          const created = new Date(a.created)
          const date = new Date(created)
          date.setHours(0, 0, 0)
          a.date = date
          const time = new Date(1900,0)
          time.setHours(created.getHours(), created.getMinutes())
          a.time = time
          return a
        })
        const height = 600
        const width = 932
        const activities = () => {
          const margin = {
            top: 20,
            right: 30,
            bottom: 30,
            left: 40
          }
          const svg = d3.select('svg#activities')

          const x = d3.scaleTime()
            .domain(d3.extent(data, d => d.date))
            .range([margin.left, width - margin.right])

          const y = d3.scaleTime()
            .domain(d3.extent(data, d => d.time).reverse())
            .range([height - margin.bottom, margin.top])

          const xAxis = g => g
            .attr('transform', `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x))

          const yAxis = g => g
            .attr('transform', `translate(${margin.left},0)`)
            .call(d3.axisLeft(y).ticks(24, '%H:00'))

          svg.append('g').call(xAxis)
          svg.append('g').call(yAxis)

          const positive = '#00C853'
          const neutral = '#757575'
          const negative = '#FF5722'

          svg.append('g')
            .selectAll('circle')
            .data(data)
            .enter()
            .append('circle')
            .attr('cx', d => x(d.date))
            .attr('cy', d => y(d.time))
            .attr('fill', d => d.rating > 0 ? positive : (d.rating < 0 ? negative : neutral))
            .attr('r', d => d.rating == 0 ? 1.5 : 2)
        }

        activities()

        const inactivities = () => {
          const _24h = 1000 * 60 * 60 * 24
          const sleeps = []

          const by_date = {}

          const push = (key, record) => {
            if(by_date[key]) {
              by_date[key].push(record)
            }
            else {
              by_date[key] = [record]
            }
          }

          data.forEach((d, i) => {
            if (i === 0) return

            const key_start = new Date(data[i - 1].date).toISOString()
            const key_end = new Date(d.date).toISOString()
            const start = new Date(data[i - 1].created)
            const end = new Date(d.created)
            const distance = i < data.length - 1 ? new Date(d.created) - new Date(data[i - 1].created) : _24h * 2

            const record = {
              start: start,
              end: end,
              distance: distance,
              hours: distance / 1000 / 60 / 60
            }

            push(key_start, record)
            push(key_end, record)
          })

          const keys = Object.keys(by_date)

          const find_max_record = (records) => {
            let record = null
            for(let i = 0; i < records.length; i++) {
              if(!record || record.distance < records[i].distance) {
                record = records[i]
              }
            }
            return record
          }

          const max_spans = []

          for(let i = 0; i < keys.length; i++) {
            let record = find_max_record(by_date[keys[i]])
            if(record.distance < _24h) {
              max_spans.push(record)
            }
          }

          max_spans.forEach((d, i) => {
            if(i === 0 || d.start - max_spans[i - 1].start !== 0) {
              if(d.start.toDateString() !== d.end.toDateString()) {
                const midnight = new Date(new Date(d.end).setHours(0, 0, 0, 0))
                sleeps.push({
                  start: d.start,
                  end: new Date(new Date(d.start).setHours(23, 59, 59, 0)),
                  distance: d.distance,
                  hours: d.hours
                })
                sleeps.push({
                  start: new Date(new Date(d.end).setHours(0, 0, 0, 0)),
                  end: d.end,
                  distance: d.distance,
                  hours: d.hours
                })
              }
              else {
                sleeps.push(d)
              }
            }
          })
          ///
          const height = 600
          const margin = {
            top: 20,
            right: 30,
            bottom: 30,
            left: 40
          }
          const svg = d3.select('svg#inactivities')

          const x = d3.scaleTime()
            .domain(d3.extent(data, d => d.date))
            .range([margin.left, width - margin.right])

          const y = d3.scaleTime()
            .domain(d3.extent(data, d => d.time).reverse())
            .range([height - margin.bottom, margin.top])

          const xAxis = g => g
            .attr('transform', `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x))

          const yAxis = g => g
            .attr('transform', `translate(${margin.left},0)`)
            .call(d3.axisLeft(y).ticks(24, '%H:00'))

          svg.append('g').call(xAxis)
          svg.append('g').call(yAxis)

          const positive = '#B0BEC5'
          const neutral = '#FF9800'
          const negative = '#FF5722'

          svg.append('g')
            .selectAll('line')
            .data(sleeps.sort((a, b) => a.hours > b.hours ? -1 : 1 ))
            .enter()
            .append('line') // <line x1="0" y1="80" x2="100" y2="20" stroke="black" />
            .attr('x1', d => x(d.end))
            .attr('y1', d => {
                const start = new Date(d.start)
                start.setFullYear(1900, 0, 1)
                return y(new Date(start))
            })
            .attr('x2', d => x(d.end))
            .attr('y2', d => {
                const end = new Date(d.end)
                end.setFullYear(1900, 0, 1)
                return y(new Date(end))
            })
            .attr('stroke', d => d.hours > 8 ? positive : (d.hours < 6 ? negative : neutral))
            .attr('stroke-width', d => d.hours > 8 ? 0.7 : (d.hours < 6 ? 2 : 1.5))
        }

        inactivities()

        const ratings = () => {
          const _24h = 1000 * 60 * 60 * 24
          const ratings = []

          let date = new Date(data[0].date)
          let positive = 0
          let negative = 0

          data.forEach((d, i) => {
            if(new Date(d.date) - new Date(d) !== 0) {
              ratings.push({
                date: date,
                positive: positive,
                negative: negative
              })
              date = new Date(d.date)
              positive = 0
              negative = 0
              if(d.rating > 0) {
                positive += d.rating
              }
              else if(d.rating < 0){
                negative += -d.rating
              }
            }
          })

          ///
          const margin = {
            top: 20,
            right: 30,
            bottom: 30,
            left: 40
          }
          const svg = d3.select('svg#ratings')

          const x = d3.scaleTime()
            .domain(d3.extent(data, d => d.date))
            .range([margin.left, width - margin.right])

          const max_rating = d3.max(ratings, r => Math.max(r.positive, r.negative))

          const y = d3.scaleLinear()
            .domain([-d3.max(ratings, r => r.negative), d3.max(ratings, r => r.positive)]).nice()
            .range([height - margin.bottom, margin.top])

          const xAxis = g => g
            .attr('transform', `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x))

          const yAxis = g => g
            .attr('transform', `translate(${margin.left},0)`)
            .call(d3.axisLeft(y).ticks(10))

          svg.append('g').call(xAxis)
          svg.append('g').call(yAxis)

          svg.append('g')
            .selectAll('line')
            .data(ratings)
            .enter()
            .append('line') // <line x1="0" y1="80" x2="100" y2="20" stroke="black" />
            .attr('x1', r => x(r.date))
            .attr('y1', r => y(0))
            .attr('x2', r => x(r.date))
            .attr('y2', r => y(r.positive))
            .attr('stroke', '#00C853')

          svg.append('g')
            .selectAll('line')
            .data(ratings)
            .enter()
            .append('line') // <line x1="0" y1="80" x2="100" y2="20" stroke="black" />
            .attr('x1', r => x(r.date))
            .attr('y1', r => y(0))
            .attr('x2', r => x(r.date))
            .attr('y2', r => y(r.negative * -1))
            .attr('stroke', '#FF5722')
        }

        ratings()